(defvar russian-input-mode-map
  (let ((map (make-sparse-keymap)))
    (define-key map [(shift f)] (lambda () (interactive) (insert "А")))
    (define-key map [(f)] (lambda () (interactive) (insert "а")))
    (define-key map [(\<)] (lambda () (interactive) (insert "Б")))
    (define-key map [(\,)] (lambda () (interactive) (insert "б")))
    (define-key map [(shift d)] (lambda () (interactive) (insert "В")))
    (define-key map [(d)] (lambda () (interactive) (insert "в")))
    (define-key map [(shift u)] (lambda () (interactive) (insert "Г")))
    (define-key map [(u)] (lambda () (interactive) (insert "г")))
    (define-key map [(shift l)] (lambda () (interactive) (insert "Д")))
    (define-key map [(l)] (lambda () (interactive) (insert "д")))
    (define-key map [(shift t)] (lambda () (interactive) (insert "Е")))
    (define-key map [(t)] (lambda () (interactive) (insert "е")))
    (define-key map [(\?)] (lambda () (interactive) (insert "Ё")))
    (define-key map [(\/)] (lambda () (interactive) (insert "ё")))
    (define-key map [(\+)] (lambda () (interactive) (insert "Ж")))
    (define-key map [(\;)] (lambda () (interactive) (insert "ж")))
    (define-key map [(shift p)] (lambda () (interactive) (insert "З")))
    (define-key map [(p)] (lambda () (interactive) (insert "з")))
    (define-key map [(shift b)] (lambda () (interactive) (insert "И")))
    (define-key map [(b)] (lambda () (interactive) (insert "и")))
    (define-key map [(shift q)] (lambda () (interactive) (insert "Й")))
    (define-key map [(q)] (lambda () (interactive) (insert "й")))
    (define-key map [(shift r)] (lambda () (interactive) (insert "К")))
    (define-key map [(r)] (lambda () (interactive) (insert "к")))
    (define-key map [(shift k)] (lambda () (interactive) (insert "Л")))
    (define-key map [(k)] (lambda () (interactive) (insert "л")))
    (define-key map [(shift v)] (lambda () (interactive) (insert "М")))
    (define-key map [(v)] (lambda () (interactive) (insert "м")))
    (define-key map [(shift y)] (lambda () (interactive) (insert "Н")))
    (define-key map [(y)] (lambda () (interactive) (insert "н")))
    (define-key map [(shift j)] (lambda () (interactive) (insert "О")))
    (define-key map [(j)] (lambda () (interactive) (insert "о")))
    (define-key map [(shift g)] (lambda () (interactive) (insert "П")))
    (define-key map [(g)] (lambda () (interactive) (insert "п")))
    (define-key map [(shift h)] (lambda () (interactive) (insert "Р")))
    (define-key map [(h)] (lambda () (interactive) (insert "р")))
    (define-key map [(shift c)] (lambda () (interactive) (insert "С")))
    (define-key map [(c)] (lambda () (interactive) (insert "с")))
    (define-key map [(shift n)] (lambda () (interactive) (insert "Т")))
    (define-key map [(n)] (lambda () (interactive) (insert "т")))
    (define-key map [(shift e)] (lambda () (interactive) (insert "У")))
    (define-key map [(e)] (lambda () (interactive) (insert "у")))
    (define-key map [(shift a)] (lambda () (interactive) (insert "Ф")))
    (define-key map [(a)] (lambda () (interactive) (insert "ф")))
    (define-key map [(\`)] (lambda () (interactive) (insert "Х")))
    (define-key map [(\@)] (lambda () (interactive) (insert "х")))
    (define-key map [(shift w)] (lambda () (interactive) (insert "Ц")))
    (define-key map [(w)] (lambda () (interactive) (insert "ц")))
    (define-key map [(shift x)] (lambda () (interactive) (insert "Ч")))
    (define-key map [(x)] (lambda () (interactive) (insert "ч")))
    (define-key map [(shift i)] (lambda () (interactive) (insert "Ш")))
    (define-key map [(i)] (lambda () (interactive) (insert "ш")))
    (define-key map [(shift o)] (lambda () (interactive) (insert "Щ")))
    (define-key map [(o)] (lambda () (interactive) (insert "щ")))
    (define-key map [(shift \{)] (lambda () (interactive) (insert "Ъ")))
    (define-key map [(\[)] (lambda () (interactive) (insert "ъ")))
    (define-key map [(shift s)] (lambda () (interactive) (insert "Ы")))
    (define-key map [(s)] (lambda () (interactive) (insert "ы")))
    (define-key map [(shift m)] (lambda () (interactive) (insert "Ь")))
    (define-key map [(m)] (lambda () (interactive) (insert "ь")))
    (define-key map [(\*)] (lambda () (interactive) (insert "Э")))
    (define-key map [(\:)] (lambda () (interactive) (insert "э")))
    (define-key map [(\>)] (lambda () (interactive) (insert "Ю")))
    (define-key map [(\.)] (lambda () (interactive) (insert "ю")))
    (define-key map [(shift z)] (lambda () (interactive) (insert "Я")))
    (define-key map [(z)] (lambda () (interactive) (insert "я")))
    map)
  "Keymap used by `russian-input-mode'.")
(easy-mmode-define-minor-mode russian-input-mode
                              "Input mode for Russian"
                              nil  " RU" russian-input-mode-map)
(global-set-key "\C-x\C-r" 'russian-input-mode)
